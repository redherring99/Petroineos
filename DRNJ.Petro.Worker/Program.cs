using DRNJ.Petro.Components;
using DRNJ.Petro.Components.Aggregator;
using DRNJ.Petro.Components.IO;
using DRNJ.Petro.Worker.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Services;

namespace DRNJ.Petro.Worker
{
    /// <summary>
    /// Autogenerated boiler-plate code from Visual Studio
    /// 
    /// Then modified for this demo
    /// 
    /// To run as a service look at https://csharp.christiannagel.com/2019/10/15/windowsservice/
    ///                             https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service
    ///                             
    /// Apply .UseWindowsService(); to CreateDeefaultBuilderChain
    /// 
    /// Install with sc create “DJ Sample Service” binPath=c:\sampleservice\DRNJ.Petro.Worker.exe
    /// sc start "DJ Sample Service"
    /// </summary>
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                 .ConfigureLogging((context, builder) =>
                 {
                     //----------------------------------------------------------------------
                     // Simple SeriLog                                                      |
                     // Using https://github.com/serilog/serilog-extensions-logging-file    |
                     //----------------------------------------------------------------------
                     builder.AddFile(context.Configuration.GetLoggerConfiguration());
                 })

                .ConfigureServices((hostContext, services) =>
                {
                    //-----------------------------------------------------------------------
                    // Get Info from Config File                                            |
                    //-----------------------------------------------------------------------
                    int pollInterval = hostContext.Configuration.Get<int>("PollInterval");
                    string csvPath = hostContext.Configuration.Get<string>("CSVPath");

                    //-----------------------------------------------------------------------
                    // Configure DI                                                         |
                    //-----------------------------------------------------------------------

                    services.AddTransient<IStreamWrapper, StreamWrapper>();
                    services.AddTransient<IFileHandler, FileHandler>();
                    services.AddTransient<IPowerService, PowerService>();

                    services.AddTransient<IAggregator, Aggregator>(x =>
                       new Aggregator(
                           x.GetRequiredService<ILogger<Aggregator>>(),
                           x.GetRequiredService<IPowerService>(),
                           x.GetRequiredService<IFileHandler>(),
                           csvPath)
                       );

                    services.AddHostedService<Worker>(x =>
                        new Worker(
                            x.GetRequiredService<ILogger<Worker>>(),
                            x.GetRequiredService<IAggregator>(),
                            pollInterval));

                })
            //****************************************
            //****************************************
            // UNCOMMENT TO RUN AS WINDOWS SERVICE
            //****************************************
            //****************************************
            //            .UseWindowsService()
            //****************************************
            //****************************************
            ;
    }
}
