using DRNJ.Petro.Components.Aggregate;
using DRNJ.Petro.Components.IO;
using DRNJ.Petro.Service;
using DRNJ.Petro.Service.Configuration;
using Microsoft.Extensions.Logging.Configuration;
using Microsoft.Extensions.Logging.EventLog;
using Serilog;
using Services;

/// <summary>
/// Autogenerated boiler-plate code from Visual Studio
/// 
/// Then modified for this demo
/// 
/// To run as a service look at https://csharp.christiannagel.com/2019/10/15/windowsservice/
///                             https://docs.microsoft.com/en-us/dotnet/core/extensions/windows-service
///                             https://learn.microsoft.com/en-us/dotnet/core/extensions/windows-service
///                             
/// 
/// Install with sc create “DJ Sample Service” binPath=c:\sampleservice\DRNJ.Petro.Service.exe
/// sc start "DJ Sample Service"
/// </summary>

IHost host = Host.CreateDefaultBuilder(args)
    //.UseSerilog()
    .UseWindowsService(options =>
    {
        options.ServiceName = "DJ Aggregator Service";
    })
    .ConfigureLogging(options =>
    {
        options.AddFilter<EventLogLoggerProvider>(level => level >= LogLevel.Information);
    }
    )
    .ConfigureServices((hostContext, services) =>
    {
        services.Configure<EventLogSettings>(config =>
        {
            config.LogName = "DJAggregator";
            config.SourceName = "DJAggregator";
        });


        //-----------------------------------------------------------------------
        // Get Info from Config File                                            |
        //-----------------------------------------------------------------------
        int pollInterval = hostContext.Configuration.Get<int>("PollInterval");
        string csvPath = hostContext.Configuration.Get<string>("CSVPath");

        //-----------------------------------------------------------------------
        // Configure DI                                                         |
        //-----------------------------------------------------------------------

        services.AddTransient<IStreamWrapper, StreamWrapper>();
        services.AddTransient<IFileHandler, FileHandler>();
        services.AddTransient<IPowerService, PowerService>();

        services.AddTransient<IAggregator, Aggregator>(x =>
           new Aggregator(
               x.GetRequiredService<ILogger<Aggregator>>(),
               x.GetRequiredService<IPowerService>(),
               x.GetRequiredService<IFileHandler>(),
               csvPath)
           );

        services.AddHostedService<WindowsBackgroundService>(x =>
                        new WindowsBackgroundService(
                            x.GetRequiredService<ILogger<WindowsBackgroundService>>(),
                            x.GetRequiredService<IAggregator>(),
                            pollInterval));

    })
    .Build();

await host.RunAsync();
